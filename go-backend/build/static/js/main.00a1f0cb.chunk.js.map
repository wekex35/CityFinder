{"version":3,"sources":["logo.svg","components/AutoSearch/AutoSearch.js","App.js","reportWebVitals.js","index.js"],"names":["AutoSearch","React","useState","open","setOpen","options","setOptions","cities","setCities","loading","Map","ReactMapboxGl","accessToken","useEffect","Autocomplete","id","style","width","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","onChange","event","fetch","then","response","json","a","console","log","data","onInputChange","active","renderInput","params","TextField","label","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","type","source","containerStyle","height","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sKAAe,I,yFCcA,SAASA,IACpB,MAAwBC,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,IAAMC,SAAS,IAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BL,IAAMC,SAAS,IAA3C,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAAUN,EACVO,EAAMC,YAAc,CACtBC,YACI,8FAGRX,IAAMY,WAAU,WACPV,GACDG,EAAW,MAGhB,CAACH,IA8CJ,OACI,qCACI,cAACW,EAAA,EAAD,CACIC,GAAG,oBACHC,MAAO,CAAEC,MAAO,KAChBd,KAAMA,EACNe,OAAQ,WACJd,GAAQ,IAEZe,QAAS,WACLf,GAAQ,IAEZgB,kBAAmB,SAACC,EAAQC,GAAT,OAAmBD,IAAWC,GACjDC,eAAgB,SAACF,GAAD,OAAYA,GAC5BhB,QAASA,EACTI,QAASA,EACTe,SA1DK,SAACC,EAAOH,GAYrB,OAVAI,IAAM,4CAAD,OAA6CJ,IAASK,MAAK,SAAAC,GAChDA,EAASC,OAAOF,MAAK,SAACG,GAC9BC,QAAQC,IAAIF,EAAEG,MACdzB,EAAUsB,EAAEG,YAOb,YACM,IA8CLC,cA1CS,SAACT,EAAOH,GACzBS,QAAQC,IAAIV,GACZS,QAAQC,IAAIvB,GAGZ,IAAI0B,GAAS,EAcb,OAZAT,IAAM,2CAAD,OAA4CJ,IAASK,MAAK,SAAAC,GAC/CA,EAASC,OAAOF,MAAK,SAACG,GAC9BC,QAAQC,IAAIF,GAERK,GACA7B,EAAWwB,EAAEG,YAOlB,WACHE,GAAS,IAuBLC,YAAa,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,2BACQD,GADR,IAEIE,MAAM,iBACNC,QAAQ,WACRC,WAAU,2BACHJ,EAAOI,YADJ,IAENC,aACI,eAAC,IAAMC,SAAP,WACKlC,EAAU,cAACmC,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KAAS,KAC3DT,EAAOI,WAAWC,wBAO3C,cAAChC,EAAD,CAEQK,GAAI,OACJgC,KAAM,OACNC,OAAQ,CACJD,KAAM,UACNd,KAAM1B,GAGdS,MAAM,oCACNiC,eAAgB,CACZC,OAAQ,QACRjC,MAAO,cC9GZkC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACpD,EAAD,OCKSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.00a1f0cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import fetch from 'cross-fetch';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './mapbox-gl.css';\r\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\n\r\nexport default function AutoSearch() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState([]);\r\n    const [cities, setCities] = React.useState([]);\r\n    const loading = open;\r\n    const Map = ReactMapboxGl({\r\n        accessToken:\r\n            'pk.eyJ1Ijoid2VrZXgzNSIsImEiOiJja3E0bmF3emgwM2FkMnBtdHM5a3FkaWo5In0.8pjWQgGpx9guRNgC2LfJ6g'\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([]);\r\n        }\r\n\r\n    }, [open]);\r\n\r\n\r\n\r\n    const onChange = (event, value) => {\r\n        let active = true;\r\n        fetch(`http://localhost:7007/adjacent-city?city=${value}`).then(response => {\r\n            const res = response.json().then((a) => {\r\n                console.log(a.data);\r\n                setCities(a.data)\r\n\r\n                // if (active) {\r\n                //     setOptions(a.data);\r\n                // }\r\n            });\r\n        });\r\n        return () => {\r\n            active = false;\r\n        };\r\n    };\r\n\r\n    const handleChange = (event, value) => {\r\n        console.log(value);\r\n        console.log(loading);\r\n\r\n\r\n        let active = true;\r\n\r\n        fetch(`http://localhost:7007/search-city?query=${value}`).then(response => {\r\n            const res = response.json().then((a) => {\r\n                console.log(a);\r\n\r\n                if (active) {\r\n                    setOptions(a.data);\r\n                }\r\n            });\r\n\r\n\r\n        });\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Autocomplete\r\n                id=\"asynchronous-demo\"\r\n                style={{ width: 300 }}\r\n                open={open}\r\n                onOpen={() => {\r\n                    setOpen(true);\r\n                }}\r\n                onClose={() => {\r\n                    setOpen(false);\r\n                }}\r\n                getOptionSelected={(option, value) => option === value}\r\n                getOptionLabel={(option) => option}\r\n                options={options}\r\n                loading={loading}\r\n                onChange={onChange}\r\n                onInputChange={handleChange}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Enter Cityname\"\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            ...params.InputProps,\r\n                            endAdornment: (\r\n                                <React.Fragment>\r\n                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                    {params.InputProps.endAdornment}\r\n                                </React.Fragment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                )}\r\n            />\r\n            <Map\r\n                {...{\r\n                    id: \"zone\",\r\n                    type: \"fill\",\r\n                    source: {\r\n                        type: \"geojson\",\r\n                        data: cities\r\n                    }\r\n                }}\r\n                style=\"mapbox://styles/mapbox/streets-v9\"\r\n                containerStyle={{\r\n                    height: '100vh',\r\n                    width: '100vw'\r\n                }}\r\n            ></Map>\r\n        </>\r\n    );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport AutoSearch from './components/AutoSearch/AutoSearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AutoSearch/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}